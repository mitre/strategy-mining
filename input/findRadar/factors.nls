;; This is how the radar works...
to sense
  ifelse showRadarStrength? [set hidden? false][set hidden? true]
  ask mySaw [set pcolor myTcolor set myRadarStrength 0]
  if not fixedSensor? [set heading heading + 1]
  set mySaw patches in-cone sqrt (1 / tHold) viewAngle
  ask mySaw [calcRadarStrength myself]
  ifelse showSweep? [ask mySaw [set pcolor white]][if showRadarStrength? [ask mySaw [showRadarStrength]]]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;  UAV stuff  ;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; This is to keep the UAVs in the playbox
to avoid
  if abs pxcor = max-pxcor or pxcor = 0
    [ set heading (- heading) ]
  if abs pycor = max-pycor or pycor = 0
    [ set heading (180 - heading) ]
end

;; This is for the UAVs to sense the radar
to feelRadar
  set myRstrength [myRadarStrength] of patch-here 
end


;; @EMD @Factor @return-type=top @parameter-type=speed @parameter-type=heading
to setNewSpeedAndHeading [s h]
  let goodS checkSpeed s
  let goodH checkHeading heading h 
  set mySpeed goodS
  set heading goodH
end

to-report checkSpeed [s]
  ifelse s < .5 or s > 5
  [ifelse s < .5 [report .5][report 5]]
  [report s]
end

to-report checkHeading [oh nh]
  let diff subtract-headings oh nh
  ifelse abs diff > max-turn
  [
    ifelse diff > 0
    [
      report (oh + max-turn) mod 360
    ]
    [
      report subtract-headings oh max-turn
    ]
  ]
  [
    report nh
  ]
end

;; @EMD @Factor @return-type=heading @parameter-type=condition @parameter-type=heading @parameter-type=heading
to-report booleanHeadingChoice [c h1 h2]
  ifelse c [report h1][report h2]
end

;; @EMD @Factor @return-type=speed @parameter-type=condition @parameter-type=speed @parameter-type=speed
to-report booleanSpeedChoice [c s1 s2]
  ifelse c [report s1][report s2]
end

;; @EMD @Factor @return-type=speed @parameter-type=speed
to-report speedup [s]
  report s * 1.1
end

;; @EMD @Factor @return-type=speed @parameter-type=speed
to-report slowdown [s]
  report s * .9
end

;; @EMD @Factor @return-type=condition @parameter-type=flock 
to-report inRadar? [f]
  report any? f with [myRstrength > 0] ; or something like this
end

;; @EMD @Factor @return-type=flock
to-report findAllFlockmates
  report other uavs with [distance myself > 0]
end

;; @EMD @Factor @return-type=flock
to-report findVizFlockmates
  report other uavs with [distance myself > 0] in-radius vision
end

;; @EMD @Factor @return-type=flock
to-report findRadarFlockmates
  report other uavs with [myRstrength > 0 and distance myself > 0]
end

;; @EMD @Factor @return-type=flock @parameter-type=flock
to-report maxRadarFlockmate [f]
  ifelse any? f 
  [
    report max-one-of f [myRstrength]
  ]
  [
    report nobody
  ]
end

;; @EMD @Factor @return-type=flock @parameter-type=flock
to-report minDistanceFlockmate [f]
  ifelse any? f 
  [
    report min-one-of f [distance myself]
  ]
  [
    report nobody
  ]
end


;; @EMD @Factor @return-type=heading @parameter-type=flock
to-report meanFlockHeading [f]
  ifelse any? f
  [
    let xl mean [sin heading] of f
    let yl mean [cos heading] of f
    ifelse xl = 0 and yl = 0
    [ 
      report heading 
    ]
    [ 
      report atan xl yl 
    ]
  ]
  [
    report heading
  ]
end

;; @EMD @Factor @return-type=heading @parameter-type=heading
to-report jitterHeading [h]
  report h + random-normal 0 10
end

;; @EMD @Factor @return-type=speed @parameter-type=speed
to-report jitterSpeed [s]
  if s <= 0 [set s 0]
  let temp -1
  while [temp <= 0]
  [
    set temp s + random-normal 0 (s * .1)
  ]
  report temp
end

;; @EMD @Factor @return-type=heading @parameter-type=flock
to-report randomFlockmateHeading [f]
  ifelse any? f 
  [
    report [heading] of one-of f
  ]
  [
    report heading
  ]
end

;; @EMD @Factor @return-type=speed @parameter-type=flock
to-report randomFlockmateSpeed [f]
  ifelse any? f
  [
    report [mySpeed] of one-of f
  ]
  [
    report mySpeed
  ]
end

;; @EMD @Factor @return-type=speed @parameter-type=flock
to-report randomSpreadSpeed [f]
  ifelse any? f
  [
    report random (max [mySpeed] of f - min [mySpeed] of f)
  ]
  [
    report mySpeed
  ]
end

;; @EMD @Factor @return-type=speed @parameter-type=flock
to-report maxFlockmateSpeed [f]
  ifelse any? f
  [
    report max [mySpeed] of f
  ]
  [
    report mySpeed
  ]
end

;; @EMD @Factor @return-type=speed @parameter-type=flock
to-report minFlockmateSpeed [f]
  ifelse any? f
  [
    report min [mySpeed] of f
  ]
  [
    report mySpeed
  ]
end

;; @EMD @Factor @return-type=speed @parameter-type=flock
to-report meanFlockmateSpeed [f]
  ifelse any? f
  [
    report mean [mySpeed] of f
  ]
  [
    report mySpeed
  ]
end

;; @EMD @Factor @return-type=speed @parameter-type=flock
to-report medianFlockmateSpeed [f]
  ifelse any? f
  [
    report median [mySpeed] of f
  ]
  [
    report mySpeed
  ]
end




; if sin(A-B)>0 then (A+B)/2 will be the bisecting angle, otherwise (A+B+360)/2
; so this is to average two headings -- essentially turn towards
;; @EMD @Factor @return-type=heading @parameter-type=heading @parameter-type=heading
to-report averageHeadings [h1 h2]  ;; turtle procedure
  ifelse sin(h1 - h2) > 0
  [
    report (h1 + h2) / 2
  ]
  [
    report (h1 + h2 + 360) / 2
  ]
end

;; @EMD @Factor @return-type=heading
to-report myHeading
  report heading
end

;; @EMD @Factor @return-type=heading @parameter-type=heading
to-report oppositeHeading [h]
  report (h + 180) mod 360
end
