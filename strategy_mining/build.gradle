plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'
}

java {
    modularity.inferModulePath = true  // enable this preview feature
}

group = 'org.mitre'
description = 'strategy_mining'
version = '1.0-SNAPSHOT'
applicationName = 'strategy_mining'  // the name that's used for the build/distribution. This does not include the version number.

repositories {
    // TODO this is MITRE specific but useful for referencing Mason and ECJ, figure out how to remove
    // Then look in Artifactory
    maven {
        url = 'https://artifacts.mitre.org:443/artifactory/gradle-plugins'
    }
    maven {
        url = 'https://artifacts.mitre.org:443/artifactory/java-libs-release'
    }
    maven {
        url = 'https://artifacts.mitre.org:443/artifactory/java-libs-snapshot'
    }
    maven {
        url 'https://artifacts.mitre.org:443/artifactory/java-plugins-release'
    }

    // Look at Maven Central
    maven {
        url = 'https://plugins.gradle.org/m2/'
    }

    // Look on Github for repositories
    maven { url 'https://jitpack.io' }

    maven {
        url = 'https://dl.cloudsmith.io/public/netlogo/netlogo/maven/'
        // https://cloudsmith.io/orgs/netlogo/
    }

    // Netlogo and all of it's dependencies are in ../lib
//    flatDir {
//        dirs '../lib'
//    }
}

dependencies {
    implementation 'com.google.guava:guava:29.0-jre'
    implementation 'edu.gmu.cs:mason:20'  // for Maven internally
//    implementation 'com.github.eclab:mason:20'  // for Github
    implementation 'edu.gmu.cs:ecj:27'
    implementation 'org:netlogo:6.1.1'
//    implementation files('../lib/netlogo-6.1.1.jar')
//    implementation files('../lib/*.jar')
    implementation 'org.spiderland.psh:pshecj:1'  // This is a modified version of PSH to use with ECJ. Source at: https://github.com/jonklein/Psh
    implementation 'org.scala-lang:scala-library:2.12.8'
    implementation 'org.scala-lang.modules:scala-parser-combinators_2.12:1.0.5'
    implementation 'commons-cli:commons-cli:1.4'
    implementation 'org.mitre:emd:1'
    // https://mvnrepository.com/artifact/org.ow2.asm/asm-commons
    implementation group: 'org.ow2.asm', name: 'asm-commons', version: '9.1'
    implementation group: 'org.ow2.asm', name: 'asm', version: '9.1'
    implementation 'org.ow2.asm:asm-util:9.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

    // CSV dependency
    implementation 'net.sf.supercsv:super-csv-java8:2.4.0'

    // Logging Dependencies
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.12.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.1'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13'
}

application {
    // Define the main class for the application.
    mainClassName = 'org.mitre.strategy_mining.StrategyMining'

    // Setting the heap size to 8GB is a doubling of what Apefight uses (about 4GB), change this as necessary for other models
    // --add-opens java.base/java.lang.ref=ALL-UNNAMED is a fix for running on Windows
    applicationDefaultJvmArgs = ["-Xmx8G", "--add-opens", "java.base/java.lang.ref=ALL-UNNAMED"]
}

test {
    // All the tests are run by default. This is just here so they can be skipped if desired with "gradle build -x test"
}

tasks.named("distTar") {
    duplicatesStrategy = 'exclude'
}

tasks.named("distZip") {
    duplicatesStrategy = 'exclude'
}

run {
     args = ["-f", "../input/apefight/experiment.apeFight.nlogo.params", "-op", "outputPath=../output/apefight.csv"]
//	args = ["-f", "../input/apeFightMason/experiment.apeFight.mason.params", "-op", "outputPath=../output/apefight.csv"]
}

build.dependsOn gradle.includedBuild('emd').task(':compileEMD')
build.dependsOn gradle.includedBuild('emd').task(':test')
