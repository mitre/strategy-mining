# Copyright 2006 by Sean Luke and George Mason University
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information

evalthreads = 1
breedthreads = 1

checkpoint = false
checkpoint-modulo = 1
checkpoint-prefix = ec

######

state = ec.simple.SimpleEvolutionState
init = ec.simple.SimpleInitializer
# We're using the standard (empty) finalization method
finish = 	        		ec.simple.SimpleFinisher

# We're using the standard (empty) exchange method
exch = 					ec.simple.SimpleExchanger

# We're using standard breeding -- no cross-population breeding
breed =					ec.simple.SimpleBreeder

# We're using standard evaluation -- no coevolution
eval =					ec.simple.SimpleEvaluator

# We're using simple statistics
stat =					ec.simple.SimpleStatistics

pop = 					ec.Population

pop.subpops =				1
pop.subpop.0 = 				ec.Subpopulation

pop.subpop.0.size =			1024
pop.subpop.0.duplicate-retries =	0

#########

# Set the fitness finding method
pop.subpop.0.species.fitness = ec.gp.koza.KozaFitness

#
# We have a GP-specific initializer.  But we'll keep the
# statistics as a SimpleStatistics (defined in simple.params)

init = ec.gp.GPInitializer


# We have a single subpopulation containing a GPSpecies,
# using GPIndividuals as the prototypical individual class.

pop.subpop.0.species = ec.gp.GPSpecies
pop.subpop.0.species.ind = ec.gp.GPIndividual

# We retry 100 times for duplicates (this is the lil-gp default)
# in our subpopulation 0

pop.subpop.0.duplicate-retries = 100

# That GPIndividual has a single tree, which uses the
# "tc0" Tree Constraints (which we define below later)

pop.subpop.0.species.ind.numtrees = 1
pop.subpop.0.species.ind.tree.0 = ec.gp.GPTree
pop.subpop.0.species.ind.tree.0.tc = tc0


# The GPSpecies has 2 pipelines, Crossover and Reproduction,
# chosen with 0.9 and 0.1 likelihood respectively.

pop.subpop.0.species.pipe = ec.breed.MultiBreedingPipeline
# Koza's decision here was odd...
pop.subpop.0.species.pipe.generate-max = false
# Subsidiary pipelines:
pop.subpop.0.species.pipe.num-sources = 2
pop.subpop.0.species.pipe.source.0 = ec.gp.koza.CrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.9
pop.subpop.0.species.pipe.source.1 = ec.breed.ReproductionPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.1




#
# Here we define the default values for Crossover,
# Reproduction, Mutation, as well as our selection
# approaches (Koza I).  These can be overridden on a per-species
# level of course.
#

# Reproduction will use Tournament Selection 
breed.reproduce.source.0 = ec.select.TournamentSelection

# Crossover will use Tournament Selection, try only 1
# time, have a max depth of 17, and use KozaNodeSelector
gp.koza.xover.source.0 = ec.select.TournamentSelection
gp.koza.xover.source.1 = same
gp.koza.xover.ns.0 = ec.gp.koza.KozaNodeSelector
gp.koza.xover.ns.1 = same
gp.koza.xover.maxdepth = 17
# This is the default for Koza and lil-gp, though it's
# a little wimpy; on the other hand, a higher number can
# make things really slow
gp.koza.xover.tries = 1




# Point Mutation will use Tournament Selection, try only 1
# time, have a max depth of 17, and use KozaNodeSelector
# and GROW for building.  Also, Point Mutation uses a GrowBuilder
# by default, with a default of min-depth=max-depth=5
# as shown a ways below
gp.koza.mutate.source.0 = ec.select.TournamentSelection
gp.koza.mutate.ns.0 = ec.gp.koza.KozaNodeSelector
gp.koza.mutate.build.0 = ec.gp.koza.GrowBuilder
gp.koza.mutate.maxdepth = 17
# This is the default for Koza and lil-gp, though it's
# a little wimpy; on the other hand, a higher number can
# make things really slow
gp.koza.mutate.tries = 1

#
# The default tournament size for TournamentSelection is 7
#

select.tournament.size = 7

# Since GROW is only used for subtree mutation, ECJ uses
# the Koza-standard subtree mutation GROW values for the
# default for GROW as a whole.  This default is
# min-depth=max-depth=5, which I don't like very much,
# but hey, that's the standard.  
# This means that if someone decided to use GROW to generate
# new individual trees, it's also use the defaults below
# unless he overrided them locally.
gp.koza.grow.min-depth = 5
gp.koza.grow.max-depth = 5

#
# We specify a few things about ADFs  -- what kind 
# of stack they use, and what kind of context
#

gp.problem.stack = ec.gp.ADFStack
gp.adf-stack.context = ec.gp.ADFContext

# The tree uses an ec.gp.koza.HalfBuilder to create
# itself initially.
# HalfBuilder will pick GROW half the time and FULL
# the other half, with a ramp from 2 to 6 inclusive.
# By ramp we mean that it first picks a random number between
# 2 and 6 inclusive.  This then becomes the *maximum* tree size
# (for the FULL approach, it's the tree size of the tree, for
# GROW, the tree can get no bigger than this)

gp.tc.0.init = ec.gp.koza.HalfBuilder

# We set the default for HalfBuilder to be a ramp of 2--6,
# with a grow probability of 0.5
gp.koza.half.min-depth = 2
gp.koza.half.max-depth = 6
gp.koza.half.growp = 0.5

# Set default koza terminal parameters
gp.koza.ns.terminals = 0.1
gp.koza.ns.nonterminals = 0.9
gp.koza.ns.root = 0.0

# Set default ticks to 100
ticks = 100

# Set default thread evaluation to auto
evalthreads = auto

# Set default master/slave configuration to false
runDistributed = false

gp.tree.print-style = c
