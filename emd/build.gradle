plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'java'
}

java {
    modularity.inferModulePath = true  // enable this preview feature
}

// Set naming and package parameters for the jar file that's created in this build
group = 'org.mitre'
description = 'emd'
version = '1.0-SNAPSHOT'

repositories {
    // Look at Maven Central
    maven {
        url = 'https://plugins.gradle.org/m2/'
    }

    // Look on Github for repositories
    maven { url 'https://jitpack.io' }

    // For Java3D
    maven {
        url = 'https://simulation.tudelft.nl/maven/'
        content {includeGroup('java3d')}
    }

    // For non-headless Netlogo it depends on org.jogamp.gluegen:gluegen-rt >= 2.4.0 and org.jogamp.jogl:jogl-all >=2.4.0 which are here
   maven {
       url = 'https://maven.jzy3d.org/releases/'
       content {
           includeGroup('org.jogamp.gluegen')
           includeGroup('org.jogamp.jogl')
       }
   }

    // For NetLogo
    maven {
        url = 'https://dl.cloudsmith.io/public/netlogo/netlogo/maven/'
        // You can see which versions are online here: https://cloudsmith.io/~netlogo/repos/netlogo/packages/
//        content {includeModule('org.nlogo','netlogo')}  // Commented out since this doesn't seem to work for netlogo
    }

    // For ECJ dependencies
    flatDir {
        dirs '../lib/'
    }
}

dependencies {
    // This dependencies are used internally, and not exposed to consumers on their own compile classpath.
    implementation 'edu.gmu.cs:mason:20'  // for Maven internally
//    implementation 'com.github.eclab:mason:v20'  // for Github via JitPack
    implementation 'edu.gmu.cs:ecj:27'  // for Maven internally
//    implementation 'com.github.GMUEClab:ecj:v27'  // for Github via JitPack
//    implementation 'org.nlogo:netlogo:6.1.1'
    implementation 'org.nlogo:netlogoheadless:6.2.0-d27b502'  // This version is just for headless Netlogo and includes dependencies
//    implementation 'org.nlogo:netlogo:6.2.0-d27b502'  // Non-headless Netlogo. Includes dependencies but the jogamp ones don't match whats on the https://maven.jzy3d.org/releases/ repository
//    implementation 'org.spiderland.psh:pshecj:1'  // This is a modified version of PSH to use with ECJ. Source at: https://github.com/jonklein/Psh
    implementation 'org.scala-lang:scala-library:2.12.8'
    implementation 'org.scala-lang.modules:scala-parser-combinators_2.12:1.0.5'

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    implementation group: 'org.ow2.asm', name: 'asm', version: '9.1'
    implementation group: 'org.ow2.asm', name: 'asm-commons', version: '9.1'
    implementation 'org.ow2.asm:asm-util:9.1'

    implementation group: 'org.apache.spark', name: 'spark-mllib_2.12', version: '3.1.1'
    implementation group: 'org.apache.spark', name: 'spark-core_2.12', version: '3.1.1'
    implementation group: 'org.apache.spark', name: 'spark-sql_2.12', version: '3.1.1'

    implementation 'net.sf.supercsv:super-csv-java8:2.4.0'

    // Logging Dependencies
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.12.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.1'

    // For MASON example, these need the TUDelft repository
//    implementation 'java3d:j3d-core-utils:1.5.1'
//    implementation 'java3d:j3d-core:1.5.1'
//    implementation 'java3d:vecmath:1.5.1'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13'
}

/**
 * This task runs the EvolutionaryModelDiscovery class and creates new Java classes in the rules package
 */
task runEMD(type:JavaExec) {
    systemProperties = System.properties
    classpath sourceSets.main.runtimeClasspath
    main = 'org.mitre.emd.EvolutionaryModelDiscovery'
    args(systemProperties['params'])
}

// Compile the Java classes generated in the rules package from running EvolutionaryModelDiscovery
task compileEMD(type:JavaCompile) {
    source = fileTree(dir: './src/main/java/org/mitre/emd/rules', include: '**/*.java', excludes: ['**/Factor.java','**/MajorityFightingMason.java','**/MajorityLinksFightingMason.java','**/MinorityFightingMason.java','**/MinorityLinksFightingMason.java','**/RankInThresholdMason.java','**/SizeInThresholdMason.java','**/ZandComboMason.java','**/ZorComboMason.java'])
    destinationDir = file('./build/classes/java/main')
    classpath = files(sourceSets.main.compileClasspath)
}

// Run factor importance analysis
task factorImportance(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = 'org.mitre.emd.FactorImportance'
}

test {
    // All the tests are run by default. This is just here so they can be skipped if desired with "gradle build -x test"
    systemProperties = System.properties
	jvmArgs = ["--add-opens", "java.base/java.lang.ref=ALL-UNNAMED"]
}



// Link the task dependencies. First you need to runEMD then compileEMD
compileEMD.dependsOn runEMD
test.dependsOn compileEMD
build.dependsOn compileEMD
